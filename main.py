# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
import telebot
from config import api_token
import logging
from telebot import types
import json
# –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = api_token
bot = telebot.TeleBot(TOKEN)
menu_items = [
        {"name": "–ì—Ä–∏–±–Ω–æ–π —Å—É–ø", "price": "450 —Ä—É–±.", "photo": "mushroom_soup.png"},
        {"name": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "price": "550 —Ä—É–±.", "photo": "caesar.png"},
        {"name": "–£—Ç–∫–∞ —Å –∞–ø–µ–ª—å—Å–∏–Ω–∞–º–∏", "price": "700 —Ä—É–±.", "photo": "duck_orange.png"},
        {"name": "–ë–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤", "price": "650 —Ä—É–±.", "photo": "stroganoff.png"},
        {"name": "–†–∏–∑–æ—Ç—Ç–æ", "price": "500 —Ä—É–±.", "photo": "risotto.png"},
        {"name": "–¢–∏—Ä–∞–º–∏—Å—É", "price": "400 —Ä—É–±.", "photo": "tiramisu.png"},
        {"name": "–ë–ª–∏–Ω—ã", "price": "300 —Ä—É–±.", "photo": "pancakes.png"},
        {"name": "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞", "price": "550 —Ä—É–±.", "photo": "carbonara.png"},
        {"name": "–ì–∞—Å–ø–∞—á–æ", "price": "350 —Ä—É–±.", "photo": "gazpacho.png"},
        {"name": "–§–∞–ª–∞—Ñ–µ–ª—å", "price": "400 —Ä—É–±.", "photo": "falafel.png"}

]
ITEMS_PER_PAGE = 4
# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
def button_menu() -> types.ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    logging.info("–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞. (–º–µ–Ω—é/–∫–æ—Ä–∑–∏–Ω–∞)")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button1 = types.KeyboardButton("–ú–µ–Ω—é üç¥")
    button2 = types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞ üß∫")
    
    markup.add(button1, button2)

    return markup
def generate_keyboard(button_names, prefix):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    """
    logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {prefix}.")
    keyboard = types.InlineKeyboardMarkup()

    for name in button_names:
        data = f"{prefix}: {name}"
        button = types.InlineKeyboardButton(f"{name}", callback_data=f"{data}")
        keyboard.add(button)

    return keyboard
def save_name(message):
    logging.info("–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.")
    new_name = message.text

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler_by_chat_id(message.chat.id, save_number)
def save_number(message):
    logging.info("–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞.")
    new_number = message.text
def generate_markup(page:int=0):
    """
    –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    logging.info("–ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –º–µ–Ω—é.") # –ø–∞–≥–∏–Ω–∞—Ü–∏—è - –æ—Ç page=—Å—Ç—Ä–∞–Ω–∏—Ü–∞, —É –º–µ–Ω—é –ø–æ—è–≤—è—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∏
    markup = types.InlineKeyboardMarkup()
    start_index = page*ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    dishes = [dish["name"] for dish in menu_items][start_index:end_index]
    for item in dishes:
        button = types.InlineKeyboardButton(item, callback_data=f"dish_{item}") # dishes.index(item)
        markup.add(button)
    if page > 0:
        markup.add(types.InlineKeyboardButton(text="‚Ü´", callback_data=f"page_{page-1}"))
    if end_index < len(menu_items):
        markup.add(types.InlineKeyboardButton(text="‚Ü¨", callback_data=f"page_{page+1}"))

    return markup
def get_cart(client_id:int|str) -> list|None:
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–º –±–ª—é–¥.
    """
    logging.info("–ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É")
    with open("data.json", "r", encoding="utf-8") as json_file:
        data = json.load(json_file)
        for client in data["clients"]:
            if client["id"] == str(client_id):
                return client["cart"]
        return
def add_dish(client_id:int|str, item:str):
    """
    –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    logging.info(f"+1 –∫ –±–ª—é–¥—É {item}.")
    with open("data.json", "r", encoding="utf-8") as json_file:
        data = json.load(json_file)
    item_in_menu = False
    for client in data["clients"]:
        if client["id"] == str(client_id):
            id_client = client
            for dish in client["cart"]:
                if dish[0] == item:
                    data["clients"][data["clients"].index(client)]["cart"].remove(dish)
                    data["clients"][data["clients"].index(client)]["cart"].append([item, dish[1]+1])
                    item_in_menu = True
    if not item_in_menu:
        data["clients"][data["clients"].index(id_client)]["cart"].append([item, 1])
    with open("data.json", "w", encoding="utf-8") as json_file:
        json.dump(data, json_file, ensure_ascii=False)
def del_dish(client_id:int|str, item:str):
    """
    –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    logging.info(f"-1 –æ—Ç –±–ª—é–¥–∞ {item}.")
    with open("data.json", "r", encoding="utf-8") as json_file:
        data = json.load(json_file)
    for client in data["clients"]:
        if client["id"] == str(client_id):
            for dish in client["cart"]:
                if dish[0] == item:
                    if dish[1] > 1:
                        data["clients"][data["clients"].index(client)]["cart"].remove(dish)
                        data["clients"][data["clients"].index(client)]["cart"].append([item, dish[1]-1])
                    else:
                        data["clients"][data["clients"].index(client)]["cart"].remove(dish)

    with open("data.json", "w", encoding="utf-8") as json_file:
        json.dump(data, json_file, ensure_ascii=False)
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
@bot.message_handler(commands=["start"])
def handle_start(message):
    logging.info("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –∑–∞–∫–∞–∂–∏ –µ–¥—É –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø—Ä—è–º–æ —Å–µ–±–µ –¥–æ–º–æ–π!", reply_markup=button_menu())
@bot.message_handler(commands=["add_info"])
def handle_add_info(message):
    logging.info("–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler_by_chat_id(message.chat.id, save_name)
@bot.message_handler(func=lambda message: True)
def reply_on_keyboard_message(message):
    if message.text == "–ú–µ–Ω—é üç¥":
        logging.info("–ú–µ–Ω—é")
        bot.reply_to(message, "–í—ã –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é.")
        bot.send_message(message.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=generate_markup())
    elif message.text == "–ö–æ—Ä–∑–∏–Ω–∞ üß∫":
        logging.info("–ö–æ—Ä–∑–∏–Ω–∞")

        items = get_cart(message.chat.id)
        markup = types.InlineKeyboardMarkup()

        for item in items:

            minus_button = types.InlineKeyboardButton("-", callback_data=f"minus_{item[0]}")
            name_button = types.InlineKeyboardButton(f"{item[0]} x{item[1]}", callback_data=f"name_{item}")
            plus_button = types.InlineKeyboardButton("+", callback_data=f"plus_{item[0]}")

            markup.add(minus_button, name_button, plus_button)

        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞:", reply_markup=markup)
@bot.callback_query_handler(func=lambda call: True)
def quary_handler(call):
    if call.data.startswith("page_"):
        logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        text, page = call.data.split("_")
        markup = generate_markup(int(page))
        bot.edit_message_text("–í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞: ", call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data.startswith("dish_"):
        logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        text, item = call.data.split("_")
        add_dish(call.message.chat.id, item)
        bot.send_message(call.message.chat.id, f"–ë–ª—é–¥–æ '{item}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    elif call.data.startswith("plus_"):
        logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
        text, item = call.data.split("_")
        add_dish(call.message.chat.id, item)
        bot.send_message(call.message.chat.id, f"–ë–ª—é–¥–∞ '{item}' –Ω–∞ –æ–¥–∏–Ω –±–æ–ª—å—à–µ.")
    elif call.data.startswith("minus_"):
        logging.info("–û–±—Ä–∞—é–æ–±—Ç–∫–∞ —É–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
        text, item = call.data.split("_")
        del_dish(call.message.chat.id, item)
        bot.send_message(call.message.chat.id, f"–ë–ª—é–¥–∞ '{item}' –Ω–∞ –æ–¥–∏–Ω –º–µ–Ω—å—à–µ.")
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã . . . . .")
    bot.polling(non_stop=True)