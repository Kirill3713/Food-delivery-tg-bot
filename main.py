# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
import telebot
from config import api_token
import logging
from telebot import types
import json
# –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = api_token
bot = telebot.TeleBot(TOKEN)
menu_items = [
        {"name": "–ì—Ä–∏–±–Ω–æ–π —Å—É–ø", "price": "450 —Ä—É–±.", "photo": "mushroom_soup.png"},
        {"name": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "price": "550 —Ä—É–±.", "photo": "caesar.png"},
        {"name": "–£—Ç–∫–∞ —Å –∞–ø–µ–ª—å—Å–∏–Ω–∞–º–∏", "price": "700 —Ä—É–±.", "photo": "duck_orange.png"},
        {"name": "–ë–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤", "price": "650 —Ä—É–±.", "photo": "stroganoff.png"},
        {"name": "–†–∏–∑–æ—Ç—Ç–æ", "price": "500 —Ä—É–±.", "photo": "risotto.png"},
        {"name": "–¢–∏—Ä–∞–º–∏—Å—É", "price": "400 —Ä—É–±.", "photo": "tiramisu.png"},
        {"name": "–ë–ª–∏–Ω—ã", "price": "300 —Ä—É–±.", "photo": "pancakes.png"},
        {"name": "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞", "price": "550 —Ä—É–±.", "photo": "carbonara.png"},
        {"name": "–ì–∞—Å–ø–∞—á–æ", "price": "350 —Ä—É–±.", "photo": "gazpacho.png"},
        {"name": "–§–∞–ª–∞—Ñ–µ–ª—å", "price": "400 —Ä—É–±.", "photo": "falafel.png"}

]
ITEMS_PER_PAGE = 4
LIST_OF_NUMBERS = {}
# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
def button_menu() -> types.ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    logging.info("–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞. (–º–µ–Ω—é/–∫–æ—Ä–∑–∏–Ω–∞/–∑–∞–∫–∞–∑–∞—Ç—å)")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button1 = types.KeyboardButton("–ú–µ–Ω—é üç¥")
    button2 = types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞ üß∫")
    button3 = types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üìú")

    markup.add(button1, button2, button3)

    return markup
# def generate_keyboard(button_names, prefix):
#     """
#     –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
#     """
#     logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {prefix}.")
#     keyboard = types.InlineKeyboardMarkup()

#     for name in button_names:
#         data = f"{prefix}: {name}"
#         button = types.InlineKeyboardButton(f"{name}", callback_data=f"{data}")
#         keyboard.add(button)

#     return keyboard
def save_name(message):
    """
    handle_add_info, save_name –∏ save_number —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞. 
    """
    logging.info("–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.")
    new_name = message.text

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler_by_chat_id(message.chat.id, save_number, new_name)
def save_number(message, name):
    """
    –°–º. –æ–ø–∏—Å–∞–Ω–∏–µ save_name.
    """
    logging.info("–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞.")
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä
    new_number = message.text.replace("+", "").replace(" ", "").strip()
    if message.text[0] == "+" and len(message.text) > 10 and len(message.text) < 17 and message.text.isdigit():
        new_number = message.text
    else:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    # –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    try:    
        with open("data.json", "r", encoding="utf-8") as json_file:
            data = json.load(json_file)
    except FileNotFoundError:
        data = {
            "clients": [
                {
                    "id": "0000000000",
                    "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                    "phone": "+7 900 000 0000",
                    "cart": []
                }
            ]
        }
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏ –≤—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        with open("data.json", "w", encoding="utf-8") as json_file:
            for client in data["clients"]:
                if client["id"] == message.chat.id:
                    cart = data["clients"][data["clients"].index(client)]["cart"]
                    data["clients"].remove(client)
                    data["clients"].append(
                        {
                            "id": str(message.chat.id),
                            "name": name,
                            "phone": new_number,
                            "cart": cart
                        }
                    )
                    json.dump(data, json_file, ensure_ascii=False)
                    bot.send_message(message.chat.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã.")
                    return
            data["clients"].append(
                {
                    "id": str(message.chat.id),
                    "name": name,
                    "phone": new_number,
                    "cart": []
                }
            )
            json.dump(data, json_file, ensure_ascii=False)
            bot.send_message(message.chat.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã.")
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_info")
def generate_markup(page:int=0):
    """
    –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    logging.info("–ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –º–µ–Ω—é.") # –ø–∞–≥–∏–Ω–∞—Ü–∏—è - –æ—Ç page=—Å—Ç—Ä–∞–Ω–∏—Ü–∞, —É –º–µ–Ω—é –ø–æ—è–≤—è—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∏
    markup = types.InlineKeyboardMarkup()
    start_index = page*ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    dishes = [dish["name"] for dish in menu_items][start_index:end_index]
    for item in dishes:
        button = types.InlineKeyboardButton(item, callback_data=f"dish_{item}") # dishes.index(item)
        markup.add(button)
    if page > 0:
        markup.add(types.InlineKeyboardButton(text="‚Ü´", callback_data=f"page_{page-1}"))
    if end_index < len(menu_items):
        markup.add(types.InlineKeyboardButton(text="‚Ü¨", callback_data=f"page_{page+1}"))

    return markup
def get_cart(client_id:int|str) -> list[list[str|int]]|None:
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–º –±–ª—é–¥.
    """
    logging.info("–ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É")
    try:
        with open("data.json", "r", encoding="utf-8") as json_file:
            data = json.load(json_file)
            for client in data["clients"]:
                if client["id"] == str(client_id):
                    return client["cart"]
            return
    except FileNotFoundError:
        return
def add_dish(client_id:int|str, item:str):
    """
    –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    logging.info(f"+1 –∫ –±–ª—é–¥—É {item}.")
    # –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    try:
        with open("data.json", "r", encoding="utf-8") as json_file:
            data = json.load(json_file)
    except FileNotFoundError:
        bot.send_message(client_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ /add_info.")
        return "No Fata Error"
    # –§–ª–∞–∂–æ–∫. True –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∑–∞–∫–∞–∑–µ –Ω—É–∂–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    item_in_menu = False
    for client in data["clients"]:
        if client["id"] == str(client_id):
            for dish in client["cart"]:
                if dish[0] == item:
                    # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
                    data["clients"][data["clients"].index(client)]["cart"].remove(dish)
                    data["clients"][data["clients"].index(client)]["cart"].append([item, dish[1]+1])
                    item_in_menu = True
    # –ï—Å–ª–∏ False, —Ç–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    if not item_in_menu:
        client_found = False
        for client in data["clients"]:
            if client["id"] == str(client_id):
                data["clients"][data["clients"].index(client)]["cart"].append([item, 1])
                client_found = True
        if not client_found:
            return "No Data Error"
    # –í—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        with open("data.json", "w", encoding="utf-8") as json_file:
            json.dump(data, json_file, ensure_ascii=False)
    except FileNotFoundError:
        bot.send_message(client_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return "No Data Error"
def del_dish(client_id:int|str, item:str):
    """
    –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.
    """
    logging.info(f"-1 –æ—Ç –±–ª—é–¥–∞ {item}.")
    try:
        with open("data.json", "r", encoding="utf-8") as json_file:
            data = json.load(json_file)
    except FileNotFoundError:
        bot.send_message(client_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    for client in data["clients"]:
        if client["id"] == str(client_id):
            for dish in client["cart"]:
                if dish[0] == item:
                    if dish[1] > 1:
                        data["clients"][data["clients"].index(client)]["cart"].remove(dish)
                        data["clients"][data["clients"].index(client)]["cart"].append([item, dish[1]-1])
                    else:
                        data["clients"][data["clients"].index(client)]["cart"].remove(dish)
    try:
        with open("data.json", "w", encoding="utf-8") as json_file:
            json.dump(data, json_file, ensure_ascii=False)
    except FileNotFoundError:
        bot.send_message(client_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
def reply_on_location(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–¥—Ä–µ—Å.
    """
    logging.info("–ü—Ä–∏–Ω–∏–º–∞–µ–º –∞–¥—Ä–µ—Å –∑–∞–∫–∞–∑–∞")
    if message.content_type == 'text':
        bot.reply_to(message, f"–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–±—É–¥–µ—Ç –ø–æ –∞–¥—Ä–µ—Å—É {message.text} —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
    elif message.content_type == 'location':
        bot.reply_to(message, f"–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–±—É–¥–µ—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º {message.location.latitude}, {message.location.longitude} —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä
@bot.message_handler(commands=["start"])
def handle_start(message):
    logging.info("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –∑–∞–∫–∞–∂–∏ –µ–¥—É –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø—Ä—è–º–æ —Å–µ–±–µ –¥–æ–º–æ–π!", reply_markup=button_menu())
@bot.message_handler(commands=["add_info"])
def handle_add_info(message):
    logging.info("–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler_by_chat_id(message.chat.id, save_name)
@bot.message_handler(commands=["help"])
def handle_help(message):
    logging.info("–°–ø—Ä–∞–≤–∫–∞")
    bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–¥—ã –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.\n/start - –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.\n/add_info - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n/help - –°–ø—Ä–∞–≤–∫–∞ –æ –±–æ—Ç–µ.\n\n–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é', –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –µ–¥—É. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–æ–ø–∫–∏ '–ö–æ—Ä–∑–∏–Ω–∞' –í–∞–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –í–∞—à–µ–π –µ–¥—ã. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å' –∏ –≤—ã–±–æ—Äf –æ–ø—Ü–∏–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' —É –í–∞—Å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –∞–¥—Ä–µ—Å –∏ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ–∂–∏–¥–∞—Ç—å –í–∞—à –∑–∞–∫–∞–∑.")
@bot.message_handler(func=lambda message: True)
def reply_on_keyboard_message(message):
    if message.text == "–ú–µ–Ω—é üç¥":
        logging.info("–ú–µ–Ω—é")
        bot.reply_to(message, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=generate_markup())
    elif message.text == "–ö–æ—Ä–∑–∏–Ω–∞ üß∫":
        logging.info("–ö–æ—Ä–∑–∏–Ω–∞")

        global LIST_OF_NUMBERS
        LIST_OF_NUMBERS = {}
        items = get_cart(message.chat.id)
        if items == None or items == []:
            bot.send_message(message.chat.id, "–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        else:
            markup = types.InlineKeyboardMarkup()
            
            for item in items:

                minus_button = types.InlineKeyboardButton("-", callback_data=f"minus_{item[0]}")
                name_button = types.InlineKeyboardButton(f"{item[0]} x{item[1]}", callback_data=f"name_{item}")
                plus_button = types.InlineKeyboardButton("+", callback_data=f"plus_{item[0]}")
                LIST_OF_NUMBERS[item[0]] = item[1]
                markup.add(minus_button, name_button, plus_button)

            bot.reply_to(message, "–ö–æ—Ä–∑–∏–Ω–∞:", reply_markup=markup)
    elif message.text == "–ó–∞–∫–∞–∑–∞—Ç—å üìú":
        logging.info("–ó–∞–∫–∞–∑")
        items = get_cart(message.chat.id)
        if items == None or items == []:
            bot.reply_to(message, "–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        else:
            bot.reply_to(message, "–í–∞—à –∑–∞–∫–∞–∑:")
            for item in items:
                bot.send_message(message.chat.id, f"‚óå {item[0]} x{item[1]}")

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            button1 = types.KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úì")
            button2 = types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å ‚úï")

            markup.add(button1, button2)

            bot.send_message(message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:", reply_markup=markup)
    elif message.text == "–û—Ç–º–µ–Ω–∏—Ç—å ‚úï":
        logging.info("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        bot.reply_to(message, "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑.", reply_markup=button_menu())
    elif message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úì":
        logging.info("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–µ–æ–º–µ—Ç–∫–æ–π Telegram.")
        bot.register_next_step_handler_by_chat_id(message.chat.id, reply_on_location)
@bot.callback_query_handler(func=lambda call: True)
def quary_handler(call):
    if call.data.startswith("page_"):
        logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        text, page = call.data.split("_")
        markup = generate_markup(int(page))
        bot.edit_message_text("–í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞: ", call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data.startswith("dish_"):
        logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        text, item = call.data.split("_")
        if add_dish(call.message.chat.id, item) != "No Data Error":
            bot.send_message(call.message.chat.id, f"–ë–ª—é–¥–æ '{item}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        else:
            bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ /add_info.")
    elif call.data.startswith("plus_"):
        logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
        text, item = call.data.split("_")
        add_dish(call.message.chat.id, item)

        items = get_cart(call.message.chat.id)
        if items == None or items == []:
            bot.send_message(call.message.chat.id, "–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        else:
            markup = types.InlineKeyboardMarkup()
            
            for item in items:

                minus_button = types.InlineKeyboardButton("-", callback_data=f"minus_{item[0]}")
                name_button = types.InlineKeyboardButton(f"{item[0]} x{item[1]}", callback_data=f"name_{item}")
                plus_button = types.InlineKeyboardButton("+", callback_data=f"plus_{item[0]}")

                markup.add(minus_button, name_button, plus_button)

        if len(call.message.text) > 8:
            global LIST_OF_NUMBERS
            if call.message.text[9] == "+":
                bot.edit_message_text(f"–ö–æ—Ä–∑–∏–Ω–∞: +{item[1]-LIST_OF_NUMBERS[item[0]]} –∫ –±–ª—é–¥—É '{item[0]}'", call.message.chat.id, call.message.message_id, reply_markup=markup)
            else:
                LIST_OF_NUMBERS[item[0]] = item[1]-1
                bot.edit_message_text(f"–ö–æ—Ä–∑–∏–Ω–∞: +{item[1]-LIST_OF_NUMBERS[item[0]]} –∫ –±–ª—é–¥—É '{item[0]}'", call.message.chat.id, call.message.message_id, reply_markup=markup)
        else:
                bot.edit_message_text(f"–ö–æ—Ä–∑–∏–Ω–∞: +1 –∫ –±–ª—é–¥—É '{item[0]}'", call.message.chat.id, call.message.message_id, reply_markup=markup)
    elif call.data.startswith("minus_"):
        logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
        text, item = call.data.split("_")
        del_dish(call.message.chat.id, item)
        items = get_cart(call.message.chat.id)
        if items == None or items == []:
            bot.send_message(call.message.chat.id, "–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        else:
            markup = types.InlineKeyboardMarkup()
            
            for item in items:

                minus_button = types.InlineKeyboardButton("-", callback_data=f"minus_{item[0]}")
                name_button = types.InlineKeyboardButton(f"{item[0]} x{item[1]}", callback_data=f"name_{item}")
                plus_button = types.InlineKeyboardButton("+", callback_data=f"plus_{item[0]}")

                markup.add(minus_button, name_button, plus_button)

        if len(call.message.text) > 8:
            if call.message.text[9] == "-":
                bot.edit_message_text(f"–ö–æ—Ä–∑–∏–Ω–∞: -{LIST_OF_NUMBERS[item[0]]-item[1]} –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª—é–¥–∞ '{item[0]}'", call.message.chat.id, call.message.message_id, reply_markup=markup)
            else:
                LIST_OF_NUMBERS[item[0]] = item[1]+1
                bot.edit_message_text(f"–ö–æ—Ä–∑–∏–Ω–∞: -{LIST_OF_NUMBERS[item[0]]-item[1]} –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª—é–¥–∞ '{item[0]}'", call.message.chat.id, call.message.message_id, reply_markup=markup)
        else:
            bot.edit_message_text(f"–ö–æ—Ä–∑–∏–Ω–∞: -1 –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª—é–¥–∞ '{item[0]}'", call.message.chat.id, call.message.message_id, reply_markup=markup)
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã . . . . .")
    bot.polling(non_stop=True)